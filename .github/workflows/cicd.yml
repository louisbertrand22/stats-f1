name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Tests du backend
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        cd backend
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests
      run: |
        cd backend
        pytest tests/ -v --tb=short
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  # Job 2: Build et scan des images Docker
  build-and-scan:
    runs-on: ubuntu-latest
    needs: test-backend
    permissions:
      contents: read
      security-events: write   # n√©cessaire pour uploader le SARIF
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # IMPORTANT: on charge l'image localement pour que Trivy la trouve
    - name: Build backend image (local)
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        tags: f1-backend:test
        push: false
        load: true                # <<‚Äî corrige l'erreur: l'image est dispo en local
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: image
        image-ref: f1-backend:test
        format: 'sarif'
        output: 'trivy-results.sarif'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Deploy (seulement sur main)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, build-and-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write          # push vers GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------- BACKEND ----------
      - name: Extract backend metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- FRONTEND ----------
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-frontend

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- NOTIF ----------
      - name: Deploy notification
        run: |
          echo "üöÄ Deployment successful!"
          echo "Backend:  ${{ steps.meta.outputs.tags }}"
          echo "Frontend: ${{ steps.meta-frontend.outputs.tags }}"
 

  # Job 4: Tests d'int√©gration
  integration-tests:
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Start services
      run: |
        docker compose up -d
        sleep 30
    
    - name: Wait for services
      run: |
        timeout 60 sh -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Run integration tests
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/drivers/current || exit 1
        curl -f http://localhost:8000/standings/drivers || exit 1
    
    - name: Stop services
      if: always()
      run: docker compose down -v

  # Job 5: Code quality
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true
