version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: f1-postgres
    environment:
      POSTGRES_USER: f1user
      POSTGRES_PASSWORD: f1password
      POSTGRES_DB: f1db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Pas d'exposition de port - uniquement accessible depuis le réseau Docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U f1user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - f1-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: f1-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - f1-network

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: f1-backend
    environment:
      - DATABASE_URL=postgresql://f1user:f1password@postgres:5432/f1db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - f1-network
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: f1-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      - f1-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  f1-network:
    driver: bridge